package com.pheth.hasee.stickerhero.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.pheth.hasee.stickerhero.greendao.Favorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE".
*/
public class FavoriteDao extends AbstractDao<Favorite, Long> {

    public static final String TABLENAME = "FAVORITE";

    /**
     * Properties of entity Favorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url_full = new Property(2, String.class, "url_full", false, "URL_FULL");
        public final static Property Url_thumb = new Property(3, String.class, "url_thumb", false, "URL_THUMB");
        public final static Property Search_id = new Property(4, String.class, "search_id", false, "SEARCH_ID");
        public final static Property Url_full_local = new Property(5, String.class, "url_full_local", false, "URL_FULL_LOCAL");
        public final static Property Url_thumb_local = new Property(6, String.class, "url_thumb_local", false, "URL_THUMB_LOCAL");
        public final static Property Add_date = new Property(7, java.util.Date.class, "add_date", false, "ADD_DATE");
    };


    public FavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public FavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"URL_FULL\" TEXT," + // 2: url_full
                "\"URL_THUMB\" TEXT," + // 3: url_thumb
                "\"SEARCH_ID\" TEXT," + // 4: search_id
                "\"URL_FULL_LOCAL\" TEXT," + // 5: url_full_local
                "\"URL_THUMB_LOCAL\" TEXT," + // 6: url_thumb_local
                "\"ADD_DATE\" INTEGER);"); // 7: add_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Favorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url_full = entity.getUrl_full();
        if (url_full != null) {
            stmt.bindString(3, url_full);
        }
 
        String url_thumb = entity.getUrl_thumb();
        if (url_thumb != null) {
            stmt.bindString(4, url_thumb);
        }
 
        String search_id = entity.getSearch_id();
        if (search_id != null) {
            stmt.bindString(5, search_id);
        }
 
        String url_full_local = entity.getUrl_full_local();
        if (url_full_local != null) {
            stmt.bindString(6, url_full_local);
        }
 
        String url_thumb_local = entity.getUrl_thumb_local();
        if (url_thumb_local != null) {
            stmt.bindString(7, url_thumb_local);
        }
 
        java.util.Date add_date = entity.getAdd_date();
        if (add_date != null) {
            stmt.bindLong(8, add_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Favorite readEntity(Cursor cursor, int offset) {
        Favorite entity = new Favorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url_full
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url_thumb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // search_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url_full_local
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url_thumb_local
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // add_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Favorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl_full(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl_thumb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSearch_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl_full_local(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl_thumb_local(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdd_date(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Favorite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Favorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
